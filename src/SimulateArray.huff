
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can; 
 *      - Push numbers onto a array, 
 *      - Pop the last index from the array,
 *      - View what's stored at an index, 
 *      - Gets the length of the array, 
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert. 
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function pushh(uint256 num) payable returns()
 #define function popp() payable returns()
 #define function read(uint256 index) payable returns(uint256)
 #define function length() payable returns(uint256)
 #define function write(uint256 index, uint256 num) payable returns()

 #define error OutOfBounds()
 #define error ZeroArray()

 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr

    dup1 __FUNC_SIG(pushh) eq pushhjp jumpi
    dup1 __FUNC_SIG(popp) eq poppjp jumpi
    dup1 __FUNC_SIG(read) eq readjp jumpi
    dup1 __FUNC_SIG(length) eq lengthjp jumpi
    dup1 __FUNC_SIG(write) eq writejp jumpi

    error:
        0x00 revert

    zeroArray:
        __ERROR(ZeroArray) 0x00 mstore
        0x04 0x00 revert

    oob:
        __ERROR(OutOfBounds) 0x00 mstore
        0x04 0x00 revert

    pushhjp:
        PUSH()
    poppjp:
        POP()
    readjp:
        READ()
    lengthjp:
        LENGTH()
    writejp:
        WRITE()
 }

  #define macro LENGTH() = takes(0) returns(0) {
    0x00 sload
    0x00 mstore
    0x20 0x00 return
 }

 #define macro PUSH() = takes(0) returns(0) {
    0x00 sload
    0x01 add
    dup1
    0x00 sstore

    0x04 calldataload
    swap1
    sstore

    0x00 0x00 return
 }

  #define macro POP() = takes(0) returns(0) {
    0x00 sload iszero zeroArray jumpi

    0x00
    0x00 sload
    sstore

    0x01
    0x00 sload
    sub
    0x00 sstore

    0x00 0x00 return
 }

 #define macro READ() = takes(0) returns(0) {
    0x00 sload 0x04 calldataload 0x01 add gt oob jumpi

    0x04 calldataload
    0x01
    add
    sload

    0x00 mstore
    0x20 0x00 return
 }

 #define macro WRITE() = takes(0) returns(0) {
    0x00 sload 0x04 calldataload 0x01 add gt oob jumpi

    0x24 calldataload
    0x04 calldataload 0x01 add
    sstore

    0x20 0x00 return
 }