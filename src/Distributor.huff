 
/** 
 *  DISTRIBUTE HUFF EXERCISE
 *  
 *  The task is to enable this contract, when called with function `distribute(address[])` to
 *  distribute the value sent with the call to each address in the address array as evenly.
 *  Revert if array length is 0
 *  Assume that array length would always be less than or equal to msg.value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function distribute(address[]) payable returns()


 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr

    dup1 __FUNC_SIG(distribute) eq distributeJP jumpi

    error:
    0x00 revert

    distributeJP:
        DISTRIBUTE()
 }

 #define macro DISTRIBUTE() = takes(0) returns(0) {
    0x24 calldataload // size of array
    dup1 iszero error jumpi
    0x20 mul 0x20 add // bytes to copy
    0x24 0x20 calldatacopy

    condition:
    0x20 mload iszero end jumpi
    
    loop:
    0x00 0x00 0x00 0x00 0x00 // call stack values

    0x01
    0x20 mload
    sub
    dup1
    0x20 mstore

    0x20 mul 0x40 add mload
    0x24 calldataload
    callvalue
    div
    swap1

    0x5208 call

    condition jump

    end:
    0x20 0x00 return
}